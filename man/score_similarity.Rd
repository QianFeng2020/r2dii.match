% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/score_similarity.R
\name{score_similarity}
\alias{score_similarity}
\title{Score the similarity between two strings}
\usage{
score_similarity(a, b, ..., method = "jw", p = 0.1)
}
\arguments{
\item{a}{R object (target); will be converted by \code{as.character}.}

\item{b}{R object (source); will be converted by \code{as.character}.}

\item{...}{Additional arguments are passed on to \link[stringdist:stringsim]{stringdist::stringsim}.}

\item{method}{Method for distance calculation. One of \code{c("osa", "lv", "dl", "hamming", "lcs", "qgram", "cosine", "jaccard", "jw", "soundex")}. See
\link[stringdist:stringdist-metrics]{stringdist::stringdist-metrics}.}

\item{p}{Penalty factor for Jaro-Winkler distance. The valid range for 
\code{p} is \code{0 <= p <= 0.25}. If \code{p=0} (default), the
Jaro-distance is returned. Applies only to \code{method='jw'}.}
}
\value{
Returns a vector with similarities, which are values between 0 and 1 where
1 corresponds to perfect similarity (distance 0) and 0 to complete
dissimilarity. \code{NA} is returned when \code{\link[stringdist]{stringdist}} returns 
\code{NA}. Distances equal to \code{Inf} are truncated to a similarity of
0.
}
\description{
This function computes pairwise string similarities between elements of
character vectors \code{a} and \code{b}, where the vector with less elements is
recycled. It is a thin wrapper around \code{stringdist::stringdist()} with
defaults set to the most common parameters used in 2dii analyses.
}
\details{
The similarity is calculated by first calculating the distance using
\code{\link[stringdist]{stringdist}}, dividing the distance by the maximum
possible distance, and substracting the result from 1. 
This results in a score between 0 and 1, with 1
corresponding to complete similarity and 0 to complete dissimilarity.
Note that complete similarity only means equality for distances satisfying
the identity property. This is not the case e.g. for q-gram based distances
(for example if q=1, anagrams are completely similar).
For distances where weights can be specified, the maximum distance 
is currently computed by assuming that all weights are equal to 1.
}
\examples{
# Clear extreemes
score_similarity("aa", "aa")
score_similarity("aa", "bb")

# Unclear extreemes
score_similarity("ab", "ba")

identical(
  score_similarity("ab", "ac"),
  score_similarity("ac", "ab")
)

score_similarity(c("fewer", "items", "get", "recycled"), "recycled")
}
\seealso{
\link[stringdist:stringsim]{stringdist::stringsim}, \link[stringdist:stringdist]{stringdist::stringdist}.

Other internal-ish: 
\code{\link{bridge_sector}()},
\code{\link{match_all_against_all}()},
\code{\link{restructure_ald_for_matching}()},
\code{\link{restructure_loanbook_for_matching}()},
\code{\link{to_alias}()},
\code{\link{uniquify_id_column}()}
}
\concept{internal-ish}
